type HttpOutcallError = variant {
  IcError : record { code : RejectionCode; message : text };
  InvalidHttpJsonRpcResponse : record {
    status : nat16;
    body : text;
    parsingError : opt text;
  };
};
type JsonRpcError = record { code : int64; message : text };
type LedgerKey = variant { HexAddress : text; IcPrincipal : principal };
type ProviderError = variant {
  TooFewCycles : record { expected : nat; received : nat };
  MissingRequiredProvider;
  ProviderNotFound;
  NoPermission;
};
type RejectionCode = variant {
  NoError;
  CanisterError;
  SysTransient;
  DestinationInvalid;
  Unknown;
  SysFatal;
  CanisterReject;
};
type Result = variant { Ok; Err : RouterError };
type RouterError = variant {
  Locked;
  DecodingError : text;
  Unknown : text;
  RpcResponseError : RpcError;
  NonExistentValue;
  InsufficientFunds;
};
type RpcError = variant {
  JsonRpcError : JsonRpcError;
  ProviderError : ProviderError;
  ValidationError : ValidationError;
  HttpOutcallError : HttpOutcallError;
};
type ServiceRequest = record { data : text; caller : text };
type ValidationError = variant {
  CredentialPathNotAllowed;
  HostNotAllowed : text;
  CredentialHeaderNotAllowed;
  UrlParseError : text;
  Custom : text;
  InvalidHex : text;
};
service : {
  add_request : (text, text, principal) -> ();
  balance : (nat64) -> (text) query;
  get_chain_ledger : (nat64) -> (
      vec record { LedgerKey; vec record { opt text; text } },
    ) query;
  get_user_balance : (nat64, opt text, opt LedgerKey) -> (nat64) query;
  poll_others_requests : (principal) -> (vec ServiceRequest) query;
  poll_requests : (nat64) -> (vec ServiceRequest) query;
  public_key : () -> (text) query;
  send_request : (nat64, text, text, nat) -> (Result);
  start : (vec record { text; nat64 }) -> ();
}
